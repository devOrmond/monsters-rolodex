{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCWZC,EARE,SAACR,GAAD,OACb,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJZM,G,MATG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACd,uBACIZ,UAAY,SACZa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoDHG,E,kDApDb,aAAc,IAAD,8BACX,gBAIOC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAPN,E,qDAab,WAAoB,IAAD,OACjBC,MAAM,8CAGLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAIzC,WAAS,IAAD,SAE2BE,KAAKR,MAA9BR,EAFF,EAEEA,SAAUS,EAFZ,EAEYA,YAEZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAIlD,OACE,sBAAK3B,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CACEW,YAAe,kBACfC,aAAgB,SAAAiB,GAGd,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,QAIrC,kBAAKC,QAAQC,IAAI,EAAKjB,aAE1B,cAAC,EAAD,CAAUR,SAAUiB,W,GAhDVS,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.184e707f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt=\"monster\" \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2>{props.monster.name}</h2>  \r\n        <h4>{props.monster.email}</h4>  \r\n    </div>\r\n);","//Import the react MODULE from the react lib\r\nimport React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component';\r\n\r\n// export const CardList = (props) => (\r\n//     <div className='card-list'>\r\n//     {props.monsters.map(monster => \r\n//         <Card key={monster.id} monster={monster}/>\r\n//     )}\r\n//     </div>\r\n// );\r\n\r\nconst CardList = (props) => (\r\n    <div className='card-list'>\r\n    {props.monsters.map(monster => \r\n        <Card key={monster.id} monster={monster}/>\r\n    )}\r\n    </div>\r\n);\r\n\r\nexport default CardList;\r\n\r\n//export const CardList = (props) => {  \r\n\r\n//console.log(props);    \r\n//return <div className='card-list'>{props.children}</div>\r\n\r\n//This returns the information in between our Component when \r\n//it gets called, ie <CardList>\r\n//return <div>props.children</div>\r\n\r\n// };","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className = 'search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\nexport default SearchBox\r\n\r\n\r\n\r\n","import { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\n//Class based component called App\nclass App extends Component{\n\n  constructor(){\n    super();\n\n      //State: An object that determines how a component renders \n      //and behaves\n      this.state = {\n        monsters: [],\n        searchField: ''\n      }; \n  }\n\n  //componentDidMount() is invoked immediately after\n  //a component is mounted (inserted into the tree)\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    //Taking the response and converting it to JSON \n    //that JS understands and uses\n    .then(response => response.json())\n    //The monsters array is set to the users array returned from the API call\n    .then(users => this.setState({monsters:users}))\n  };\n\n  //Returns any HTML Elements we want\n  render(){\n    //Destructuring\n    const { monsters, searchField} = this.state\n\n    const filteredMonsters = monsters.filter(monster =>(\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ));\n\n\n    return (\n      <div className=\"App\">       \n      <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder = {'search monsters'}\n          handleChange = {e =>{\n            //When setState is called and the value is changed\n            //React re-renders our component\n            this.setState({searchField: e.target.value}, \n            //This Callback ensures that we print out the current value\n            //of the search field. Otherwise it would print one character\n            //short due to it's asynchronous nature.\n            ()=> console.log(this.state));}}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}